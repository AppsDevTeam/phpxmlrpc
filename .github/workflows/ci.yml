name: CI

on: [push, pull_request]

jobs:
    test:
        runs-on: ${{ matrix.operating-system }}
        env:
            HTTPSERVER: localhost
            URI: /demo/server/server.php
            HTTPSSERVER: localhost
            HTTPSURI: /demo/server/server.php
            PROXYSERVER: localhost:8080
            # @todo check: is this necessary as well on GHA runners?
            # was: "Travis currently compiles PHP with an oldish cURL/GnuTLS combination;
            #       to make the tests pass when Apache has a bogus SSL cert whe need the full set of options below."
            HTTPSVERIFYHOST: 0
            HTTPSIGNOREPEER: 1
            SSLVERSION: 0
            DEBUG: 0
        strategy:
            fail-fast: false
            matrix:
                # @see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
                operating-system: ['ubuntu-20.04'] # @todo add 'windows-latest'. Also: run some tests on ubuntu 22
                # @todo enable testing on php 5.3. Note that it requires use an older version of phpunit (and there is
                #       no yoast/phpunit-polyfills support?)
                php: ['8.1', '8.0', '7.4', '7.3', '7.2', '7.1', '7.0', '5.6', '5.5', '5.4']
        steps:
            -    name: checkout code
                 uses: actions/checkout@v2

            # Although this action is quite nice, we prefer to use the same script to set up php that we use for the
            # docker image used for local testing. This allows us to make sure that script is always in good shape
            #-   name: set up php
            #    uses: shivammathur/setup-php@v2
            #    with:
            #        php-version: ${{ matrix.php }}
            #        extensions: curl, dom, mbstring, xsl
            #        ini-values: 'cgi.fix_pathinfo=1, always_populate_raw_post_data=-1'
            #        #tools: ${{ matrix.phpunit-version }}
            #        coverage: ${{ matrix.code-coverage}}

            -   name: set up env
                # @todo add env setup scripts for windows
                run: |
                    chmod 755 ./tests/ci/setup/*.sh
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/setup/setup_perl.sh
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/setup/setup_apache.sh
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/setup/setup_privoxy.sh
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/setup/setup_php.sh ${{ matrix.php }}
                    sudo --preserve-env=GITHUB_ACTIONS ./tests/ci/setup/setup_composer.sh
                    # fix fs perms for recent Apache versions configuration (ie. starting from Jammy)
                    f="$(pwd)"; while [[ $f != / ]]; do sudo chmod +rx "$f"; f=$(dirname "$f"); done;
                    find . -type d -exec chmod +rx {} \;
                    find . -type f -exec chmod +r {} \;

            # Avoid downloading composer deps on every workflow run. Is this useful for us? Caching the installation of
            # php/apache/privoxy/perl would be more useful...
            #-
            #    uses: actions/cache@v2
            #    with:
            #        path: /tmp/composer-cache
            #        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

            -   name: install dependencies
                run: 'composer install'

            -   name: run tests and upload coverage info
                if: ${{ matrix.php == '7.4' }}
                run: |
                    ./tests/ci/setup/setup_code_coverage.sh enable
                    ./vendor/bin/phpunit -v --coverage-clover=coverage.clover tests
                    #if [ -f coverage.clover ]; then wget https://scrutinizer-ci.com/ocular.phar && php ocular.phar code-coverage:upload --format=php-clover coverage.clover; fi
                    if [ -f coverage.clover ]; then wget https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov -f coverage.clover; fi

            -   name: run tests
                if: ${{ matrix.php != '7.4' }}
                run: './vendor/bin/phpunit -v tests'

            # @todo would it be useful to run a 2nd test with composer --prefer-lowest? After all the only dependencies we have are testing tools

            -   name: test python demo files
                run: 'python3 demo/client/python/test.py'

            -   name: test perl demo files
                run: 'perl demo/client/perl/test.pl'

            -   name: failure troubleshooting
                if: ${{ failure() }}
                run: |
                    #env
                    #php -i
                    #ps auxwww
                    #dpkg --list | grep php
                    #ps auxwww | grep fpm
                    #pwd
                    #sudo env
                    #systemctl status apache2.service
                    #ls -la /etc/apache2/mods-enabled
                    #ls -la /etc/apache2/conf-enabled
                    #ls -la /etc/apache2/mods-available
                    #ls -la /etc/apache2/conf-available
                    #ls -la /etc/apache2/sites-available/
                    #sudo cat /etc/apache2/envvars
                    #sudo cat /etc/apache2/sites-available/000-default.conf
                    #ls -ltr /var/log
                    #ls -ltr /var/log/apache2
                    sudo cat /var/log/privoxy/*
                    sudo cat /var/log/apache2/error.log
                    sudo cat /var/log/apache2/other_vhosts_access.log
                    sudo cat /var/log/php*.log
